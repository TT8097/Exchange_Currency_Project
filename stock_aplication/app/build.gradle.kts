/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("org.bytedeco.gradle-javacpp-platform").version("1.5.10")
    id("org.beryx.runtime").version("1.12.7") // <------
}
val platform = when {
    getCurrentOperatingSystem().isWindows -> "win"
    getCurrentOperatingSystem().isLinux -> "linux"
    getCurrentOperatingSystem().isMacOsX -> "mac"
    else -> throw UnsupportedOperationException("Operating system ${getCurrentOperatingSystem()} not supported yet")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    implementation(group = "org.openjfx", name = "javafx-base", version = "23", classifier = platform)
    implementation(group = "org.openjfx", name = "javafx-graphics", version = "23", classifier = platform)
    implementation(group = "org.openjfx", name = "javafx-controls", version = "23", classifier = platform)
    implementation(group = "org.openjfx", name = "javafx-fxml", version = "23", classifier = platform)
    implementation(group = "org.openjfx", name = "javafx-web", version = "23", classifier = platform)

    testImplementation(group = "org.junit.jupiter", name = "junit-jupiter", version = "5.9.3")
    testImplementation("org.mockito:mockito-core:5.14.2")
    // This dependency is used by the application.
    implementation("com.google.guava:guava:32.1.1-jre")
}
runtime {
    jpackage {
        imageName = rootProject.name
        skipInstaller = true
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("stock_aplication.App")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
